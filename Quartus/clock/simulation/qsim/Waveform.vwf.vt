// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/27/2014 21:35:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    clock
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module clock_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module clock_vlg_check_tst (
	hout,
	mout,
	sout,
	sampler_rx
);
input [4:0] hout;
input [5:0] mout;
input [5:0] sout;
input sampler_rx;

reg [4:0] hout_expected;
reg [5:0] mout_expected;
reg [5:0] sout_expected;

reg [4:0] hout_prev;
reg [5:0] mout_prev;
reg [5:0] sout_prev;

reg [4:0] hout_expected_prev;
reg [5:0] mout_expected_prev;
reg [5:0] sout_expected_prev;

reg [4:0] last_hout_exp;
reg [5:0] last_mout_exp;
reg [5:0] last_sout_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	hout_prev = hout;
	mout_prev = mout;
	sout_prev = sout;
end

// update expected /o prevs

always @(trigger)
begin
	hout_expected_prev = hout_expected;
	mout_expected_prev = mout_expected;
	sout_expected_prev = sout_expected;
end


// expected hout[ 4 ]
initial
begin
	hout_expected[4] = 1'bX;
end 
// expected hout[ 3 ]
initial
begin
	hout_expected[3] = 1'bX;
end 
// expected hout[ 2 ]
initial
begin
	hout_expected[2] = 1'bX;
end 
// expected hout[ 1 ]
initial
begin
	hout_expected[1] = 1'bX;
end 
// expected hout[ 0 ]
initial
begin
	hout_expected[0] = 1'bX;
end 
// expected mout[ 5 ]
initial
begin
	mout_expected[5] = 1'bX;
end 
// expected mout[ 4 ]
initial
begin
	mout_expected[4] = 1'bX;
end 
// expected mout[ 3 ]
initial
begin
	mout_expected[3] = 1'bX;
end 
// expected mout[ 2 ]
initial
begin
	mout_expected[2] = 1'bX;
end 
// expected mout[ 1 ]
initial
begin
	mout_expected[1] = 1'bX;
end 
// expected mout[ 0 ]
initial
begin
	mout_expected[0] = 1'bX;
end 
// expected sout[ 5 ]
initial
begin
	sout_expected[5] = 1'bX;
end 
// expected sout[ 4 ]
initial
begin
	sout_expected[4] = 1'bX;
end 
// expected sout[ 3 ]
initial
begin
	sout_expected[3] = 1'bX;
end 
// expected sout[ 2 ]
initial
begin
	sout_expected[2] = 1'bX;
end 
// expected sout[ 1 ]
initial
begin
	sout_expected[1] = 1'bX;
end 
// expected sout[ 0 ]
initial
begin
	sout_expected[0] = 1'bX;
end 
// generate trigger
always @(hout_expected or hout or mout_expected or mout or sout_expected or sout)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected hout = %b | expected mout = %b | expected sout = %b | ",hout_expected_prev,mout_expected_prev,sout_expected_prev);
	$display("| real hout = %b | real mout = %b | real sout = %b | ",hout_prev,mout_prev,sout_prev);
`endif
	if (
		( hout_expected_prev[0] !== 1'bx ) && ( hout_prev[0] !== hout_expected_prev[0] )
		&& ((hout_expected_prev[0] !== last_hout_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hout_expected_prev);
		$display ("     Real value = %b", hout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hout_exp[0] = hout_expected_prev[0];
	end
	if (
		( hout_expected_prev[1] !== 1'bx ) && ( hout_prev[1] !== hout_expected_prev[1] )
		&& ((hout_expected_prev[1] !== last_hout_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hout_expected_prev);
		$display ("     Real value = %b", hout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hout_exp[1] = hout_expected_prev[1];
	end
	if (
		( hout_expected_prev[2] !== 1'bx ) && ( hout_prev[2] !== hout_expected_prev[2] )
		&& ((hout_expected_prev[2] !== last_hout_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hout_expected_prev);
		$display ("     Real value = %b", hout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hout_exp[2] = hout_expected_prev[2];
	end
	if (
		( hout_expected_prev[3] !== 1'bx ) && ( hout_prev[3] !== hout_expected_prev[3] )
		&& ((hout_expected_prev[3] !== last_hout_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hout_expected_prev);
		$display ("     Real value = %b", hout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hout_exp[3] = hout_expected_prev[3];
	end
	if (
		( hout_expected_prev[4] !== 1'bx ) && ( hout_prev[4] !== hout_expected_prev[4] )
		&& ((hout_expected_prev[4] !== last_hout_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hout_expected_prev);
		$display ("     Real value = %b", hout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hout_exp[4] = hout_expected_prev[4];
	end
	if (
		( mout_expected_prev[0] !== 1'bx ) && ( mout_prev[0] !== mout_expected_prev[0] )
		&& ((mout_expected_prev[0] !== last_mout_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mout_expected_prev);
		$display ("     Real value = %b", mout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_mout_exp[0] = mout_expected_prev[0];
	end
	if (
		( mout_expected_prev[1] !== 1'bx ) && ( mout_prev[1] !== mout_expected_prev[1] )
		&& ((mout_expected_prev[1] !== last_mout_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mout_expected_prev);
		$display ("     Real value = %b", mout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_mout_exp[1] = mout_expected_prev[1];
	end
	if (
		( mout_expected_prev[2] !== 1'bx ) && ( mout_prev[2] !== mout_expected_prev[2] )
		&& ((mout_expected_prev[2] !== last_mout_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mout_expected_prev);
		$display ("     Real value = %b", mout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_mout_exp[2] = mout_expected_prev[2];
	end
	if (
		( mout_expected_prev[3] !== 1'bx ) && ( mout_prev[3] !== mout_expected_prev[3] )
		&& ((mout_expected_prev[3] !== last_mout_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mout_expected_prev);
		$display ("     Real value = %b", mout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_mout_exp[3] = mout_expected_prev[3];
	end
	if (
		( mout_expected_prev[4] !== 1'bx ) && ( mout_prev[4] !== mout_expected_prev[4] )
		&& ((mout_expected_prev[4] !== last_mout_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mout_expected_prev);
		$display ("     Real value = %b", mout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_mout_exp[4] = mout_expected_prev[4];
	end
	if (
		( mout_expected_prev[5] !== 1'bx ) && ( mout_prev[5] !== mout_expected_prev[5] )
		&& ((mout_expected_prev[5] !== last_mout_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mout_expected_prev);
		$display ("     Real value = %b", mout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_mout_exp[5] = mout_expected_prev[5];
	end
	if (
		( sout_expected_prev[0] !== 1'bx ) && ( sout_prev[0] !== sout_expected_prev[0] )
		&& ((sout_expected_prev[0] !== last_sout_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sout_expected_prev);
		$display ("     Real value = %b", sout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sout_exp[0] = sout_expected_prev[0];
	end
	if (
		( sout_expected_prev[1] !== 1'bx ) && ( sout_prev[1] !== sout_expected_prev[1] )
		&& ((sout_expected_prev[1] !== last_sout_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sout_expected_prev);
		$display ("     Real value = %b", sout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sout_exp[1] = sout_expected_prev[1];
	end
	if (
		( sout_expected_prev[2] !== 1'bx ) && ( sout_prev[2] !== sout_expected_prev[2] )
		&& ((sout_expected_prev[2] !== last_sout_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sout_expected_prev);
		$display ("     Real value = %b", sout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sout_exp[2] = sout_expected_prev[2];
	end
	if (
		( sout_expected_prev[3] !== 1'bx ) && ( sout_prev[3] !== sout_expected_prev[3] )
		&& ((sout_expected_prev[3] !== last_sout_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sout_expected_prev);
		$display ("     Real value = %b", sout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sout_exp[3] = sout_expected_prev[3];
	end
	if (
		( sout_expected_prev[4] !== 1'bx ) && ( sout_prev[4] !== sout_expected_prev[4] )
		&& ((sout_expected_prev[4] !== last_sout_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sout_expected_prev);
		$display ("     Real value = %b", sout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sout_exp[4] = sout_expected_prev[4];
	end
	if (
		( sout_expected_prev[5] !== 1'bx ) && ( sout_prev[5] !== sout_expected_prev[5] )
		&& ((sout_expected_prev[5] !== last_sout_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sout_expected_prev);
		$display ("     Real value = %b", sout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sout_exp[5] = sout_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module clock_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire [4:0] hout;
wire [5:0] mout;
wire [5:0] sout;

wire sampler;                             

// assign statements (if any)                          
clock i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.hout(hout),
	.mout(mout),
	.sout(sout)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

clock_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

clock_vlg_check_tst tb_out(
	.hout(hout),
	.mout(mout),
	.sout(sout),
	.sampler_rx(sampler)
);
endmodule

